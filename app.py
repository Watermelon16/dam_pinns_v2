import torch
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import FancyArrow
import streamlit as st
# Thi·∫øt l·∫≠p trang Streamlit
st.set_page_config(
    page_title="T·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c",
    page_icon="üèûÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded")
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
import os
os.makedirs("data", exist_ok=True)  # t·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a t·ªìn t·∫°i
import base64
from io import BytesIO
import sqlite3
import threading
from contextlib import contextmanager
import ezdxf


# Import c√°c module t√πy ch·ªânh
from pinns_optimizer import optimize_dam_section, create_force_diagram_plotly, plot_loss_curve, export_actual_dam_profile_to_dxf
from database import DamDatabase

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
def get_database():
    db = DamDatabase("data/dam_results.db")
    db.create_tables()  # Th√™m d√≤ng n√†y ƒë·ªÉ t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
    return db

# H√†m t·∫°o b√°o c√°o Excel
def create_excel_report(result):
    # T·∫°o DataFrame cho b√°o c√°o
    data = {
        'Th√¥ng s·ªë': [
            'Chi·ªÅu cao ƒë·∫≠p (H)',
            'Tr·ªçng l∆∞·ª£ng ri√™ng b√™ t√¥ng (Œ≥_bt)',
            'Tr·ªçng l∆∞·ª£ng ri√™ng n∆∞·ªõc (Œ≥_n)',
            'H·ªá s·ªë ma s√°t (f)',
            'C∆∞·ªùng ƒë·ªô kh√°ng c·∫Øt (C)',
            'H·ªá s·ªë ·ªïn ƒë·ªãnh y√™u c·∫ßu (Kc)',
            'H·ªá s·ªë √°p l·ª±c th·∫•m (a1)',
            'H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u (n)',
            'H·ªá s·ªë m√°i h·∫° l∆∞u (m)',
            'Tham s·ªë Œæ',
            'Di·ªán t√≠ch m·∫∑t c·∫Øt (A)',
            'H·ªá s·ªë ·ªïn ƒë·ªãnh (K)',
            '·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u (œÉ)',
            'Chi·ªÅu r·ªông ƒë√°y ƒë·∫≠p (B)',
            'ƒê·ªô l·ªách t√¢m (e)',
            'L·ª±c ƒë·∫©y n·ªïi (W1)',
            'L·ª±c ƒë·∫©y ngang (W2)',
            '√Åp l·ª±c th·∫•m (Wt)',
            'Tr·ªçng l∆∞·ª£ng ƒë·∫≠p (G)',
            'L·ª±c ch·ªëng tr∆∞·ª£t (Fct)',
            'L·ª±c g√¢y tr∆∞·ª£t (Fgt)',
            'S·ªë v√≤ng l·∫∑p th·ª±c t·∫ø',
            'S·ªë v√≤ng l·∫∑p t·ªëi ƒëa',
            'Th·ªùi gian t√≠nh to√°n (gi√¢y)'
        ],
        'Gi√° tr·ªã': [
            result['H'],
            result['gamma_bt'],
            result['gamma_n'],
            result['f'],
            result['C'],
            result['Kc'],
            result['a1'],
            result['n'],
            result['m'],
            result['xi'],
            result['A'],
            result['K'],
            result['sigma'],
            result['B'],
            result['e'],
            result['W1'],
            result['W2'],
            result['Wt'],
            result['G'],
            result['Fct'],
            result['Fgt'],
            result['iterations'],
            result.get('max_iterations', 5000),
            result.get('computation_time', 0)
        ],
        'ƒê∆°n v·ªã': [
            'm',
            'T/m¬≥',
            'T/m¬≥',
            '',
            'T/m¬≤',
            '',
            '',
            '',
            '',
            '',
            'm¬≤',
            '',
            'T/m¬≤',
            'm',
            'm',
            'T/m',
            'T/m',
            'T/m',
            'T/m',
            'T/m',
            'T/m',
            'v√≤ng',
            'v√≤ng',
            's'
        ]
    }
    
    return pd.DataFrame(data)

# H√†m t·∫°o link t·∫£i xu·ªëng Excel
def get_excel_download_link(df, filename):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name='B√°o c√°o')
    excel_data = output.getvalue()
    b64 = base64.b64encode(excel_data).decode()
    href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{filename}">üì• T·∫£i xu·ªëng b√°o c√°o Excel</a>'
    return href


# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üèûÔ∏è T·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c s·ª≠ d·ª•ng PINNs")
st.markdown("""
·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng m√¥ h√¨nh Physics-Informed Neural Networks (PINNs) ƒë·ªÉ t√≠nh to√°n m·∫∑t c·∫Øt kinh t·∫ø ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán:
- Di·ªán t√≠ch m·∫∑t c·∫Øt A l√† nh·ªè nh·∫•t (h√†m m·ª•c ti√™u c·∫ßn t·ªëi ∆∞u)
- Th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh tr∆∞·ª£t: K=Kc
- Th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ª©ng su·∫•t m√©p th∆∞·ª£ng l∆∞u: œÉ‚âà0 (kh√¥ng c√≥ ·ª©ng su·∫•t k√©o)
""")

# T·∫°o tabs
tabs = st.tabs(["T√≠nh to√°n m·ªõi", "L·ªãch s·ª≠ t√≠nh to√°n"])

# Tab T√≠nh to√°n m·ªõi
with tabs[0]:
    # Kh·ªüi t·∫°o gi√° tr·ªã m·∫∑c ƒë·ªãnh
    default_values = {
        'H': 30.0,
        'gamma_bt': 2.4,
        'gamma_n': 1.0,
        'f': 0.7,
        'C': 0.0,
        'Kc': 1.2,
        'a1': 0.5,
        'max_iterations': 5000,
        'convergence_threshold': 1e-6,
        'patience': 50
    }
    
    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    for k, v in default_values.items():
        if k not in st.session_state:
            st.session_state[k] = v
    
    # Chia layout th√†nh 2 c·ªôt
    col1, col2 = st.columns([1, 2])
    
    # C·ªôt 1: Form nh·∫≠p li·ªáu
    with col1:
        st.markdown("### Th√¥ng s·ªë t√≠nh to√°n")
        
        # Form nh·∫≠p li·ªáu
        with st.form("input_form"):
            # Th√¥ng s·ªë ƒë·∫≠p
            H = st.number_input(
                "Chi·ªÅu cao ƒë·∫≠p (m)", 
                min_value=10.0, 
                max_value=300.0, 
                value=st.session_state.H, 
                step=10.0
            )
            gamma_bt = st.number_input(
                "Tr·ªçng l∆∞·ª£ng ri√™ng b√™ t√¥ng (T/m¬≥)", 
                min_value=2.0, 
                max_value=3.0, 
                value=st.session_state.gamma_bt, 
                step=0.1
            )
            gamma_n = st.number_input(
                "Tr·ªçng l∆∞·ª£ng ri√™ng n∆∞·ªõc (T/m¬≥)", 
                min_value=0.9, 
                max_value=1.1, 
                value=st.session_state.gamma_n, 
                step=0.1
            )
            
            # Th√¥ng s·ªë v·∫≠t li·ªáu
            f = st.number_input(
                "H·ªá s·ªë ma s√°t", 
                min_value=0.3, 
                max_value=2.0, 
                value=st.session_state.f, 
                step=0.05
            )
            C = st.number_input(
                "C∆∞·ªùng ƒë·ªô kh√°ng c·∫Øt (T/m¬≤)", 
                min_value=0.0, 
                max_value=50.0, 
                value=st.session_state.C, 
                step=5.0
            )
            Kc = st.number_input(
                "H·ªá s·ªë ·ªïn ƒë·ªãnh y√™u c·∫ßu", 
                min_value=1.1, 
                max_value=4.0, 
                value=st.session_state.Kc, 
                step=0.1
            )
            a1 = st.number_input(
                "H·ªá s·ªë √°p l·ª±c th·∫•m", 
                min_value=0.0, 
                max_value=1.0, 
                value=st.session_state.a1, 
                step=0.01
            )
            
            # Th√¥ng s·ªë t√≠nh to√°n
            with st.expander("Th√¥ng s·ªë t√≠nh to√°n"):
                max_iterations = st.slider(
                    "S·ªë v√≤ng l·∫∑p t·ªëi ƒëa", 
                    min_value=1000, 
                    max_value=10000, 
                    value=st.session_state.max_iterations, 
                    step=1000
                )
                convergence_threshold = st.number_input(
                    "Ng∆∞·ª°ng h·ªôi t·ª•", 
                    min_value=1e-8, 
                    max_value=1e-4, 
                    value=st.session_state.convergence_threshold, 
                    format="%.1e"
                )
                patience = st.slider(
                    "S·ªë v√≤ng l·∫∑p ki√™n nh·∫´n", 
                    min_value=10, 
                    max_value=200, 
                    value=st.session_state.patience, 
                    step=10,
                    help="S·ªë v√≤ng l·∫∑p ch·ªù ƒë·ª£i khi kh√¥ng c√≥ c·∫£i thi·ªán tr∆∞·ªõc khi d·ª´ng s·ªõm"
                )
            
                convergence_threshold = st.session_state.convergence_threshold
                patience = st.session_state.patience
            
            # N√∫t t√≠nh to√°n
            submitted = st.form_submit_button("T√≠nh to√°n t·ªëi ∆∞u")
        
        # N√∫t ƒë·∫∑t l·∫°i
        reset_clicked = st.button("üîÑ ƒê·∫∑t l·∫°i")
        if reset_clicked:
            for k, v in default_values.items():
                st.session_state[k] = v
            st.success("ƒê√£ reset l·∫°i c√°c gi√° tr·ªã!")  # Th√¥ng b√°o tr·ª±c quan khi ƒë·∫∑t l·∫°i
    
        # X·ª≠ l√Ω khi form ƒë∆∞·ª£c g·ª≠i
        if submitted:
            # C·∫≠p nh·∫≠t session state
            st.session_state.H = H
            st.session_state.gamma_bt = gamma_bt
            st.session_state.gamma_n = gamma_n
            st.session_state.f = f
            st.session_state.C = C
            st.session_state.Kc = Kc
            st.session_state.a1 = a1
            st.session_state.max_iterations = max_iterations
            st.session_state.convergence_threshold = convergence_threshold
            st.session_state.patience = patience
            
            with st.spinner("ƒêang t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p..."):
                # Ghi l·∫°i th·ªùi gian b·∫Øt ƒë·∫ßu
                start_time = datetime.now()
                
                # Th·ª±c hi·ªán t√≠nh to√°n
                try:
                    result = optimize_dam_section(
                        H=H,
                        gamma_bt=gamma_bt,
                        gamma_n=gamma_n,
                        f=f,
                        C=C,
                        Kc=Kc,
                        a1=a1,
                        max_iterations=max_iterations,
                        convergence_threshold=convergence_threshold,
                        patience=patience
                    )
                    
                    # T√≠nh th·ªùi gian t√≠nh to√°n
                    computation_time = (datetime.now() - start_time).total_seconds()
                    result['computation_time'] = computation_time
                    
                    # L∆∞u k·∫øt qu·∫£ v√†o session state
                    st.session_state['result'] = result
                    
                    try:
                        # L∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu
                        db = get_database()
                        result_id = db.save_result(result)
                        st.session_state['last_result_id'] = result_id
                        st.success(f"ƒê√£ l∆∞u k·∫øt qu·∫£ t√≠nh to√°n v√†o c∆° s·ªü d·ªØ li·ªáu (ID: {result_id})")
                    except Exception as e:
                        st.warning(f"Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu: {str(e)}")
                except Exception as e:
                    st.error(f"L·ªói trong qu√° tr√¨nh t√≠nh to√°n: {str(e)}")
                    st.exception(e)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
    with col2:
        if 'result' in st.session_state and st.session_state['result'] is not None:
            result = st.session_state['result']
            
            st.markdown("### K·∫øt qu·∫£ t√≠nh to√°n")
            
            # Hi·ªÉn th·ªã c√°c tham s·ªë t·ªëi ∆∞u
            col_params1, col_params2 = st.columns(2)
            
            with col_params1:
                st.metric("H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u (n)", f"{result['n']:.3f}")
                st.metric("H·ªá s·ªë m√°i h·∫° l∆∞u (m)", f"{result['m']:.3f}")
                st.metric("Tham s·ªë Œæ", f"{result['xi']:.3f}")
            
            with col_params2:
                st.metric("Di·ªán t√≠ch m·∫∑t c·∫Øt (A)", f"{result['A']:.2f} m¬≤")
                st.metric("H·ªá s·ªë ·ªïn ƒë·ªãnh (K)", f"{result['K']:.2f}")
                st.metric("·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u (œÉ)", f"{result['sigma']:.2f} T/m¬≤")
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i
            if abs(result['K'] - result['Kc']) < 0.05:  # Sai s·ªë cho ph√©p 5%
                st.success(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.2f} ‚âà Kc = {result['Kc']:.2f})")
            elif result['K'] > result['Kc']:
                st.info(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.2f} > Kc = {result['Kc']:.2f})")
            else:
                st.error(f"M·∫∑t c·∫Øt ƒë·∫≠p KH√îNG th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.2f} < Kc = {result['Kc']:.2f})")
            
            if result['sigma'] <= 0:
                st.success(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán kh√¥ng k√©o (œÉ = {result['sigma']:.2f} T/m¬≤ ‚â§ 0)")
            else:
                st.warning(f"M·∫∑t c·∫Øt ƒë·∫≠p c√≥ ·ª©ng su·∫•t k√©o ·ªü m√©p th∆∞·ª£ng l∆∞u (œÉ = {result['sigma']:.2f} T/m¬≤ > 0)")
            
            # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ s·ªë v√≤ng l·∫∑p
            st.info(f"S·ªë v√≤ng l·∫∑p th·ª±c t·∫ø: {result['iterations']} / {result.get('max_iterations', max_iterations)} (t·ªëi ƒëa)")
            
            # Hi·ªÉn th·ªã th·ªùi gian t√≠nh to√°n
            st.info(f"Th·ªùi gian t√≠nh to√°n: {result['computation_time']:.2f} gi√¢y")
            
            # T·∫°o tabs cho c√°c bi·ªÉu ƒë·ªì
            result_tabs = st.tabs(["M·∫∑t c·∫Øt ƒë·∫≠p", "Bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t", "Xu·∫•t b√°o c√°o","M·∫∑t c·∫Øt th·ª±c t·∫ø"])
            
            # Tab m·∫∑t c·∫Øt ƒë·∫≠p
            with result_tabs[0]:
                # T·∫°o bi·ªÉu ƒë·ªì Plotly t∆∞∆°ng t√°c
                try:
                    fig = create_force_diagram_plotly(
                        H=result['H'],
                        n=result['n'],
                        m=result['m'],
                        xi=result['xi']
                    )
                    st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì m·∫∑t c·∫Øt ƒë·∫≠p: {str(e)}")
                    st.exception(e)
            
            # Tab bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t
            with result_tabs[1]:
                # T·∫°o bi·ªÉu ƒë·ªì Plotly t∆∞∆°ng t√°c
                try:
                    if 'loss_history' in result and len(result['loss_history']) > 0:
                        loss_fig = plot_loss_curve(result['loss_history'])
                        st.plotly_chart(loss_fig, use_container_width=True)
                    else:
                        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ h√†m m·∫•t m√°t ƒë·ªÉ hi·ªÉn th·ªã")
                except Exception as e:
                    st.error(f"Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t: {str(e)}")
                    st.exception(e)
            
            # Tab xu·∫•t b√°o c√°o
            with result_tabs[2]:
                st.markdown("### Xu·∫•t b√°o c√°o")
                
                # T·∫°o b√°o c√°o Excel
                excel_df = create_excel_report(result)
                
                # Hi·ªÉn th·ªã b√°o c√°o
                st.dataframe(excel_df, use_container_width=True)
                
                # T·∫°o link t·∫£i xu·ªëng
                st.markdown(
                    get_excel_download_link(excel_df, f"bao_cao_dam_H{int(result['H'])}.xlsx"),
                    unsafe_allow_html=True
                )
            # Tab m·∫∑t c·∫Øt th·ª±c t·∫ø
            with result_tabs[3]:  # n·∫øu th√™m tab m·ªõi th√¨ s·ª≠a th√†nh [3]
                st.markdown("### M·∫∑t c·∫Øt ƒë·∫≠p th·ª±c t·∫ø")
                st.markdown("#### Nh·∫≠p th√¥ng s·ªë ƒë·∫≠p th·ª±c t·∫ø")

            with st.form("actual_profile_form"):
                H_total = st.number_input("Chi·ªÅu cao ƒë·∫≠p th·ª±c t·∫ø H‚Çú (m)", min_value=result['H'], value=result['H'] + 10.0, step=1.0)
                B_top = st.number_input("Chi·ªÅu r·ªông ƒë·ªânh ƒë·∫≠p B‚Çú (m)", min_value=1.0, value=5.0, step=0.5)
                submitted_real = st.form_submit_button("V·∫Ω m·∫∑t c·∫Øt th·ª±c t·∫ø")

            if submitted_real:
                from pinns_optimizer import create_actual_dam_profile
                fig_real = create_actual_dam_profile(
                            H_opt=result['H'],
                            n=result['n'],
                            m=result['m'],
                            xi=result['xi'],
                            H_total=H_total,
                            B_top=B_top)
                st.plotly_chart(fig_real, use_container_width=True)

                # üëâ G·ªçi h√†m xu·∫•t DXF
                dxf_path = export_actual_dam_profile_to_dxf(
                    H_opt=result['H'],
                    n=result['n'],
                    m=result['m'],
                    xi=result['xi'],
                    H_total=H_total,
                    B_top=B_top)

    # T·∫°o link t·∫£i
                with open(dxf_path, "rb") as f:
                    dxf_bytes = f.read()
                    b64 = base64.b64encode(dxf_bytes).decode()
                    href = f'<a href="data:application/dxf;base64,{b64}" download="mat_cat_dap.dxf">üì• T·∫£i file AutoCAD (.dxf)</a>'
                    st.markdown(href, unsafe_allow_html=True)


# Tab L·ªãch s·ª≠ t√≠nh to√°n
with tabs[1]:
    st.markdown("### L·ªãch s·ª≠ t√≠nh to√°n")
    
    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu
        db = get_database()
        history_df = db.get_all_results()
        
        if len(history_df) > 0:
            # Hi·ªÉn th·ªã b·∫£ng l·ªãch s·ª≠
            st.dataframe(
                history_df[['id', 'timestamp', 'H', 'gamma_bt', 'gamma_n', 'f', 'C', 'Kc', 'a1', 'n', 'm', 'xi', 'A', 'K', 'sigma']],
                use_container_width=True
            )
            
            # Ch·ªçn k·∫øt qu·∫£ ƒë·ªÉ xem chi ti·∫øt
            selected_id = st.selectbox("Ch·ªçn ID ƒë·ªÉ xem chi ti·∫øt:", history_df['id'].tolist())
            
            if st.button("Xem chi ti·∫øt"):
                # L·∫•y k·∫øt qu·∫£ t·ª´ c∆° s·ªü d·ªØ li·ªáu
                selected_result = db.get_result_by_id(selected_id)
                
                if selected_result:
                    # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                    st.markdown("#### Th√¥ng tin chi ti·∫øt")
                    
                    # T·∫°o DataFrame t·ª´ k·∫øt qu·∫£
                    detail_df = pd.DataFrame({
                        'Th√¥ng s·ªë': [
                            'Chi·ªÅu cao ƒë·∫≠p (H)',
                            'Tr·ªçng l∆∞·ª£ng ri√™ng b√™ t√¥ng (Œ≥_bt)',
                            'Tr·ªçng l∆∞·ª£ng ri√™ng n∆∞·ªõc (Œ≥_n)',
                            'H·ªá s·ªë ma s√°t (f)',
                            'C∆∞·ªùng ƒë·ªô kh√°ng c·∫Øt (C)',
                            'H·ªá s·ªë ·ªïn ƒë·ªãnh y√™u c·∫ßu (Kc)',
                            'H·ªá s·ªë √°p l·ª±c th·∫•m (a1)',
                            'H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u (n)',
                            'H·ªá s·ªë m√°i h·∫° l∆∞u (m)',
                            'Tham s·ªë Œæ',
                            'Di·ªán t√≠ch m·∫∑t c·∫Øt (A)',
                            'H·ªá s·ªë ·ªïn ƒë·ªãnh (K)',
                            '·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u (œÉ)',
                            'S·ªë v√≤ng l·∫∑p th·ª±c t·∫ø',
                            'S·ªë v√≤ng l·∫∑p t·ªëi ƒëa',
                        ],
                        'Gi√° tr·ªã': [
                            selected_result['H'],
                            selected_result['gamma_bt'],
                            selected_result['gamma_n'],
                            selected_result['f'],
                            selected_result['C'],
                            selected_result['Kc'],
                            selected_result['a1'],
                            selected_result['n'],
                            selected_result['m'],
                            selected_result['xi'],
                            selected_result['A'],
                            selected_result['K'],
                            selected_result['sigma'],
                            selected_result['iterations'],
                            selected_result.get('max_iterations', 5000),
                        ]
                    })
                    
                    # Hi·ªÉn th·ªã b·∫£ng th√¥ng tin chi ti·∫øt
                    st.dataframe(detail_df, use_container_width=True)
                    
                    # T·∫°o bi·ªÉu ƒë·ªì m·∫∑t c·∫Øt ƒë·∫≠p
                    try:
                        fig = create_force_diagram(selected_result)
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"Kh√¥ng th·ªÉ t·∫°o bi·ªÉu ƒë·ªì m·∫∑t c·∫Øt ƒë·∫≠p: {str(e)}")
                        st.exception(e)
                else:
                    st.error(f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ v·ªõi ID = {selected_id}")
        else:
            st.info("Ch∆∞a c√≥ k·∫øt qu·∫£ t√≠nh to√°n n√†o ƒë∆∞·ª£c l∆∞u trong c∆° s·ªü d·ªØ li·ªáu")
    except Exception as e:
        st.error(f"L·ªói khi truy c·∫≠p c∆° s·ªü d·ªØ li·ªáu: {str(e)}")
        st.exception(e)

# Th√¥ng tin v·ªÅ ·ª©ng d·ª•ng
with st.sidebar:
    st.markdown("### Th√¥ng tin")
    st.markdown("""
    **C√¥ng c·ª• x√°c ƒë·ªãnh m·∫∑t c·∫Øt t·ªëi ∆∞u ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c ph·∫ßn kh√¥ng tr√†n b·∫±ng PINNs**
    
    ·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng m√¥ h√¨nh Physics-Informed Neural Networks (PINNs) ƒë·ªÉ t√≠nh to√°n m·∫∑t c·∫Øt kinh t·∫ø ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh.
    
    **C√°c t√≠nh nƒÉng ch√≠nh:**
    - T√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c
    - Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì m·∫∑t c·∫Øt ƒë·∫≠p v√† s∆° ƒë·ªì l·ª±c
    - V·∫Ω m·∫∑t c·∫Øt th·ª±c t·∫ø ƒë·∫≠p b√™ t√¥ng
    - Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t
    - Xu·∫•t b√°o c√°o Excel
    - L∆∞u tr·ªØ v√† xem l·∫°i l·ªãch s·ª≠ t√≠nh to√°n
    
    **Ph∆∞∆°ng ph√°p PINNs:**
    - S·ª≠ d·ª•ng m·∫°ng n∆°-ron ƒë·ªÉ t√¨m b·ªô tham s·ªë t·ªëi ∆∞u (n, m, Œæ)
    - K·∫øt h·ª£p c√°c r√†ng bu·ªôc v·∫≠t l√Ω v√†o h√†m m·∫•t m√°t
    - T·ªëi ∆∞u h√≥a ƒë·ªìng th·ªùi c·∫£ h√†m m·ª•c ti√™u v√† c√°c r√†ng bu·ªôc
    """)
    
    st.markdown("---")
    st.markdown("¬© 2025 - C√¥ng c·ª• t√≠nh to√°n m·∫∑t c·∫Øt kinh t·∫ø ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c")
    st.markdown("Nh√≥m t√°c gi·∫£: TS. L√™ H·ªìng Ph∆∞∆°ng, Nguy·ªÖn Quang Long, Tr∆∞∆°ng Th√°i ƒê·ª©c D∆∞∆°ng - Tr∆∞·ªùng ƒë·∫°i h·ªçc Th·ªßy l·ª£i")
